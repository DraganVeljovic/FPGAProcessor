-- Copyright (C) 1991-2013 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, Altera MegaCore Function License 
-- Agreement, or other applicable license agreement, including, 
-- without limitation, that your use is for the sole purpose of 
-- programming logic devices manufactured by Altera and sold by 
-- Altera or its authorized distributors.  Please refer to the 
-- applicable agreement for further details.

-- ***************************************************************************
-- This file contains a Vhdl test bench template that is freely editable to   
-- suit user's needs .Comments are provided in each section to help the user  
-- fill out necessary details.                                                
-- ***************************************************************************
-- Generated on "08/06/2014 16:35:03"
                                                            
-- Vhdl Test Bench template for design  :  cpu
-- 
-- Simulation tool : ModelSim-Altera (VHDL)
-- 

LIBRARY ieee;                                               
USE ieee.std_logic_1164.all;                                

ENTITY cpu_vhd_tst IS
END cpu_vhd_tst;
ARCHITECTURE cpu_arch OF cpu_vhd_tst IS
-- constants                                                 
-- signals                                                   
SIGNAL clk : STD_LOGIC;
SIGNAL data_rd : STD_LOGIC_VECTOR(31 DOWNTO 0);
SIGNAL data_rm : STD_LOGIC_VECTOR(31 DOWNTO 0);
SIGNAL data_rn : STD_LOGIC_VECTOR(31 DOWNTO 0);
SIGNAL data_rs : STD_LOGIC_VECTOR(31 DOWNTO 0);
SIGNAL instr.BBL : STD_LOGIC;
SIGNAL instr.DP_I : STD_LOGIC;
SIGNAL instr.DP_R : STD_LOGIC;
SIGNAL instr.INVALID : STD_LOGIC;
SIGNAL instr.LS : STD_LOGIC;
SIGNAL instr.S : STD_LOGIC;
SIGNAL ir_out_id : STD_LOGIC_VECTOR(31 DOWNTO 0);
SIGNAL mem_addr : STD_LOGIC_VECTOR(31 DOWNTO 0);
SIGNAL mem_data : STD_LOGIC_VECTOR(31 DOWNTO 0);
SIGNAL mem_read : STD_LOGIC;
SIGNAL mem_write : STD_LOGIC;
SIGNAL pc_init : STD_LOGIC;
SIGNAL pc_init_value : STD_LOGIC_VECTOR(31 DOWNTO 0);
SIGNAL pc_new_out_id : STD_LOGIC_VECTOR(31 DOWNTO 0);
SIGNAL pc_out_id : STD_LOGIC_VECTOR(31 DOWNTO 0);
SIGNAL reg_a : STD_LOGIC_VECTOR(31 DOWNTO 0);
SIGNAL reg_b : STD_LOGIC_VECTOR(31 DOWNTO 0);
SIGNAL reg_no_a : STD_LOGIC_VECTOR(3 DOWNTO 0);
SIGNAL reg_no_b : STD_LOGIC_VECTOR(3 DOWNTO 0);
SIGNAL reg_wr_a : STD_LOGIC;
SIGNAL reg_wr_b : STD_LOGIC;
SIGNAL reset : STD_LOGIC;
COMPONENT cpu
	PORT (
	clk : IN STD_LOGIC;
	data_rd : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
	data_rm : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
	data_rn : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
	data_rs : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
	\instr.BBL\ : OUT STD_LOGIC;
	\instr.DP_I\ : OUT STD_LOGIC;
	\instr.DP_R\ : OUT STD_LOGIC;
	\instr.INVALID\ : OUT STD_LOGIC;
	\instr.LS\ : OUT STD_LOGIC;
	\instr.S\ : OUT STD_LOGIC;
	ir_out_id : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
	mem_addr : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
	mem_data : INOUT STD_LOGIC_VECTOR(31 DOWNTO 0);
	mem_read : OUT STD_LOGIC;
	mem_write : OUT STD_LOGIC;
	pc_init : IN STD_LOGIC;
	pc_init_value : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
	pc_new_out_id : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
	pc_out_id : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
	reg_a : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
	reg_b : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
	reg_no_a : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
	reg_no_b : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
	reg_wr_a : IN STD_LOGIC;
	reg_wr_b : IN STD_LOGIC;
	reset : IN STD_LOGIC
	);
END COMPONENT;
BEGIN
	i1 : cpu
	PORT MAP (
-- list connections between master ports and signals
	clk => clk,
	data_rd => data_rd,
	data_rm => data_rm,
	data_rn => data_rn,
	data_rs => data_rs,
	\instr.BBL\ => instr.BBL,
	\instr.DP_I\ => instr.DP_I,
	\instr.DP_R\ => instr.DP_R,
	\instr.INVALID\ => instr.INVALID,
	\instr.LS\ => instr.LS,
	\instr.S\ => instr.S,
	ir_out_id => ir_out_id,
	mem_addr => mem_addr,
	mem_data => mem_data,
	mem_read => mem_read,
	mem_write => mem_write,
	pc_init => pc_init,
	pc_init_value => pc_init_value,
	pc_new_out_id => pc_new_out_id,
	pc_out_id => pc_out_id,
	reg_a => reg_a,
	reg_b => reg_b,
	reg_no_a => reg_no_a,
	reg_no_b => reg_no_b,
	reg_wr_a => reg_wr_a,
	reg_wr_b => reg_wr_b,
	reset => reset
	);
init : PROCESS                                               
-- variable declarations                                     
BEGIN                                                        
        -- code that executes only once                      
WAIT;                                                       
END PROCESS init;                                           
always : PROCESS                                              
-- optional sensitivity list                                  
-- (        )                                                 
-- variable declarations                                      
BEGIN                                                         
        -- code executes for every event on sensitivity list  
WAIT;                                                        
END PROCESS always;                                          
END cpu_arch;
