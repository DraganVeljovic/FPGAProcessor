-- Copyright (C) 1991-2013 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, Altera MegaCore Function License 
-- Agreement, or other applicable license agreement, including, 
-- without limitation, that your use is for the sole purpose of 
-- programming logic devices manufactured by Altera and sold by 
-- Altera or its authorized distributors.  Please refer to the 
-- applicable agreement for further details.

-- ***************************************************************************
-- This file contains a Vhdl test bench template that is freely editable to   
-- suit user's needs .Comments are provided in each section to help the user  
-- fill out necessary details.                                                
-- ***************************************************************************
-- Generated on "07/23/2014 18:06:54"
                                                            
-- Vhdl Test Bench template for design  :  instruction_cache
-- 
-- Simulation tool : ModelSim-Altera (VHDL)
-- 

LIBRARY ieee;                                               
USE ieee.std_logic_1164.all;                                

ENTITY instruction_cache_vhd_tst IS
END instruction_cache_vhd_tst;
ARCHITECTURE instruction_cache_arch OF instruction_cache_vhd_tst IS
-- constants                                                 
-- signals                                                   
SIGNAL ack : STD_LOGIC;
SIGNAL clk : STD_LOGIC;
SIGNAL cpu_addr : STD_LOGIC_VECTOR(31 DOWNTO 0);
SIGNAL cpu_data : STD_LOGIC_VECTOR(31 DOWNTO 0);
SIGNAL hit : STD_LOGIC;
SIGNAL mem_addr : STD_LOGIC_VECTOR(31 DOWNTO 0);
SIGNAL mem_data : STD_LOGIC_VECTOR(31 DOWNTO 0);
SIGNAL mem_read : STD_LOGIC;
SIGNAL req : STD_LOGIC;
SIGNAL reset : STD_LOGIC;
SIGNAL wait_mem : STD_LOGIC;
COMPONENT instruction_cache
	PORT (
	ack : IN STD_LOGIC;
	clk : IN STD_LOGIC;
	cpu_addr : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
	cpu_data : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
	hit : OUT STD_LOGIC;
	mem_addr : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
	mem_data : INOUT STD_LOGIC_VECTOR(31 DOWNTO 0);
	mem_read : OUT STD_LOGIC;
	req : OUT STD_LOGIC;
	reset : IN STD_LOGIC;
	wait_mem : OUT STD_LOGIC
	);
END COMPONENT;
BEGIN
	i1 : instruction_cache
	PORT MAP (
-- list connections between master ports and signals
	ack => ack,
	clk => clk,
	cpu_addr => cpu_addr,
	cpu_data => cpu_data,
	hit => hit,
	mem_addr => mem_addr,
	mem_data => mem_data,
	mem_read => mem_read,
	req => req,
	reset => reset,
	wait_mem => wait_mem
	);
init : PROCESS                                               
-- variable declarations                                     
BEGIN                                                        
        -- code that executes only once                      
WAIT;                                                       
END PROCESS init;                                           
always : PROCESS                                              
-- optional sensitivity list                                  
-- (        )                                                 
-- variable declarations                                      
BEGIN                                                         
        -- code executes for every event on sensitivity list  
WAIT;                                                        
END PROCESS always;                                          
END instruction_cache_arch;
